generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// ðŸŽ­ **Utilisateur avec SSO & Profil dÃ©taillÃ©**
model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String?    @unique
  password   String? // Nullable pour SSO
  role       Role      @default(USER) // Enum : User, Auteur, Admin
  image     String?
  emailVerified DateTime? // Nullable pour SSO
  profile    Json?  // Remplace `Profile`
  social     Json? // Remplace `Social`
  sso        Json? // Remplace `SSO`
  name String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  @@map("users")
}

/// ðŸ“‘ **Article avec Commentaires intÃ©grÃ©s**
model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  shortDesc   String
  content     String
  authorId    String    @db.ObjectId
  imageBase64 String?
  tags        String[]
  isPublished Boolean
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  seoTitle    String?
  seoDesc     String?
  comments    Json? // Remplace `Comment[]`
  likes       String[] // Nombre de likes
  views       Int       @default(0) // Nombre de vues
}

/// ðŸ“Š **Statistiques de l'Article**
model Stats {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  views     Int
  likes     Int
  comments  Int
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
enum Role {
  USER
  AUTHOR
  ADMIN
}
